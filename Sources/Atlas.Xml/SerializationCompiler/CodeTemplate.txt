using System;
using Atlas.Xml;
using System.Xml;

namespace Atlas.Xml.SerializationCompiler.Dynamic
{
    public class {className} : IXmlSerializer<{typeName}>
    {

{classLevelCodePart}
		public void Serialize(XmlWriter writer, {typeName} objectInstance, SerializationOptions options)
		{
//BEGIN: Remove If Sealed
			var realType =  objectInstance.GetType();
			if(realType != typeof({typeName}))
			{
				writer.WriteAttributeString(Serializer.TypeAttributeName, realType.GetNameForGetType());
				SerializerFactory.GetSerializer(realType).WriteXml(writer, objectInstance, options);
				return;
			}
//END: Remove If Sealed
{writerCode}
		}

		public {typeName} Deserialize(XmlReader reader, SerializationOptions options)
		{
//BEGIN: Remove If Sealed
			if(reader.MoveToFirstAttribute() && reader.LocalName == Serializer.TypeAttributeName)
			{
				var type = CachedTypeResolver.GetType(reader.Value);
				if(type != typeof({typeName}))
					return ({typeName})SerializerFactory.GetSerializer(type).ReadXml(reader, options);

				{abstractTypeDeserializationException}
			}
//END: Remove If Sealed

			{abstractUnspecifiedTypeDeserializationException}
//BEGIN: Remove If Abstract
			var objectInstance = new {typeName}();
			Deserialize(reader, objectInstance, options);

			return objectInstance;
//END: Remove If Abstract
		}

		public void Deserialize(XmlReader reader, {typeName} objectInstance, SerializationOptions options)
		{
//BEGIN: Remove If No Attributes
			if(reader.MoveToFirstAttribute())
			{
				do
				{
					switch (reader.LocalName)
					{
{attributeReaderCode}
					}
				}
				while (reader.MoveToNextAttribute());

				reader.MoveToElement();
			}
//END: Remove If No Attributes

//BEGIN: Remove If No Text Or Elements
			if(!reader.IsEmptyElement)
			{
				while (reader.Read())
				{
					while (reader.NodeType == XmlNodeType.Element)
					{
//BEGIN: Remove If No Elements
						switch (reader.LocalName)
						{
{elementReaderCode}
							default:
								reader.Skip();
								break;
						}
//END: Remove If No Elements
					}

					{textReaderCode}
					if(reader.NodeType == XmlNodeType.EndElement)
						break;
				}

				{emptyStringFixForTextReaderCode}
			}

			reader.Read();
//END: Remove If No Text Or Elements
		}

		public SerializationOptions DefaultSerializationOptions 
		{
			get { return {serializationOptionsCode}; }
		}

		public void WriteXml(XmlWriter writer, object objectInstance, SerializationOptions options)
		{
			Serialize(writer, ({typeName})objectInstance, options);
		}

		public object ReadXml(XmlReader reader, SerializationOptions options)
		{
			return Deserialize(reader, options);
		}

		public void ReadXml(XmlReader reader, object objectInstance, SerializationOptions options)
		{
			Deserialize(reader, ({typeName})objectInstance, options);
		}

	}
}