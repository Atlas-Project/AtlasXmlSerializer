using System;
using Atlas.Xml;
using System.Xml;

namespace Atlas.Xml.SerializationCompiler.Dynamic
{
    public class {className} : IXmlSerializer<{typeName}>
    {

{classLevelCodePart}
		public void Serialize(XmlWriter writer, {typeName} objectInstance, SerializationOptions options)
		{
{writerCode}
		}

		public {typeName} Deserialize(XmlReader reader, SerializationOptions options)
		{
			var objectInstance = default({typeName});

			if(!reader.IsEmptyElement)
			{
				while (reader.Read())
				{
					while (reader.NodeType == XmlNodeType.Element)
						reader.Skip();

					{textReaderCode}
					if(reader.NodeType == XmlNodeType.EndElement)
						break;
				}

				{emptyStringFixForTextReaderCode}
			}
			{nullCheckForNonNullables}

			reader.Read();
			return objectInstance;
		}

		public void Deserialize(XmlReader reader, {typeName} objectInstance, SerializationOptions options)
		{
			throw new NotSupportedException("Deserialization cannot be done into existing instance on value types! Use Deserialize(reader, options) instead.");
		}

		public SerializationOptions DefaultSerializationOptions 
		{
			get { return {serializationOptionsCode}; }
		}

		public void WriteXml(XmlWriter writer, object objectInstance, SerializationOptions options)
		{
			Serialize(writer, ({typeName})objectInstance, options);
		}

		public object ReadXml(XmlReader reader, SerializationOptions options)
		{
			return Deserialize(reader, options);
		}

		public void ReadXml(XmlReader reader, object objectInstance, SerializationOptions options)
		{
			Deserialize(reader, ({typeName})objectInstance, options);
		}

	}
}